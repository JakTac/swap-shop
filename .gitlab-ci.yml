stages:
  - test
  - build
  - deploy

# Run flake8 to check for code quality
lint-test-job:
  image: python:3-bullseye
  stage: test
  script:
    - pip install flake8
    - flake8 swapshop

# Run the unit tests
swap-shop-unit-test-job:
  image: python:3-bullseye
  stage: test
  needs:
    - lint-test-job
  script:
    - cd swapshop
    - pip install -r requirements.txt
    - python -m pytest

# Build the React/JavaScript front-end
build-front-end-job:
  rules:
    # Only run if pushing to the main branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  stage: build
  image: node:lts-bullseye
  needs:
    - lint-test-job
    - swap-shop-unit-test-job
  variables:
    PUBLIC_URL: https://seven30.gitlab.io/project-swap-shop/
  script:
    - cd ghi
    - npm install
    - npm run build
    - cp build/index.html build/404.html
  artifacts:
    paths:
      - ghi/build/

build-back-end-job:
  rules:
    # Only run if pushing to the main branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    # DO THIS FOR EACH SERVICE YOU NEED TO BUILD A DOCKER
    # IMAGE FOR

    # Builds the image CHANGE THE /app FOR EACH SERVICE
    # Gives the image a specific name
    # Authenticates with the GitLab image registry

    # Stores your image in the GitLab image registry
    # with two different tags, the version from the tag
    # and the name "latest"

    - cd project-swap-shop-fastapi
    - docker build -t ${CI_REGISTRY_IMAGE}/project-swap-shop-fastapi:latest .
    - docker tag ${CI_REGISTRY_IMAGE}/project-swap-shop-fastapi:latest ${CI_REGISTRY_IMAGE}/fastapi:$CI_JOB_ID
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker push ${CI_REGISTRY_IMAGE}/fastapi:$CI_JOB_ID
    - docker push ${CI_REGISTRY_IMAGE}/fastapi:latest

    - cd node
    - docker build -t ${CI_REGISTRY_IMAGE}/node:latest .
    - docker tag ${CI_REGISTRY_IMAGE}/node:latest ${CI_REGISTRY_IMAGE}/node:$CI_JOB_ID
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker push ${CI_REGISTRY_IMAGE}/node:$CI_JOB_ID
    - docker push ${CI_REGISTRY_IMAGE}/node:latest

    - cd project-swap-shop-postgres
    - docker build -t ${CI_REGISTRY_IMAGE}/project-swap-shop-postgres:latest .
    - docker tag ${CI_REGISTRY_IMAGE}/project-swap-shop-postgres:latest ${CI_REGISTRY_IMAGE}/postgres:$CI_JOB_ID
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker push ${CI_REGISTRY_IMAGE}/postgres:$CI_JOB_ID
    - docker push ${CI_REGISTRY_IMAGE}/postgres:latest

# Deploy the React/JavaScript front-end to GitLab pages
pages:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  dependencies:
    - build-front-end-job
  needs:
    - build-front-end-job
  script:
    - mv ghi/build/ public
  artifacts:
    paths:
      - public
